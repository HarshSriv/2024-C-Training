#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = NULL;
    }
};

    void inserthead(int data) {
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }

  void inserttail(int data) {
        Node* newNode = new Node(data);
        if (head == NULL) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

  void insertposition(int data, int position) {
        if (position <= 0) {
            std::cout << "Invalid position." << std::endl;
            return;
        }
        if (position == 1 || head == NULL) {
            insertAtHead(data);
        } else {
            Node* newNode = new Node(data);
            Node* current = head;
            int count = 1;
            while (count < position - 1 && current != NULL) {
                current = current->next;
                count++;
            }
            if (current == NULL) {
                std::cout << "Invalid position." << std::endl;
                return;
            }
            newNode->next = current->next;
            current->next = newNode;
        }
    }


    void deleteposition(int position) {
        if (position <= 0 || head == NULL) {
            std::cout << "Invalid position." << std::endl;
            return;
        }
        if (position == 1) {
            Node* temp = head;
            head = head->next;
            delete temp;
        } else {
            Node* current = head;
            Node* prev = NULL;
            int count = 1;
            while (count < position && current != NULL) {
                prev = current;
                current = current->next;
                count++;
            }
            if (current == NULL) {
                std::cout << "Invalid position." << std::endl;
                return;
            }
            prev->next = current->next;
            delete current;
        }
    }

//Searching of a node
    bool search(int value) {
        Node* current = head;
        while (current != NULL) {
            if (current->data == value) {
                return true;
            }
            current = current->next;
        }
        return false;
    }

//Display the nodes

    void print() {
        Node* current = head;
        while (current != NULL) {
            std::cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList n;
    n.inserthead(1);
    n.inserthead(2);

    n.inserttail(4);
    n.inserttail(3);

    n.insertposition(10, 2);
    n.insertposition(20, 3);

    n.print(); 

    abc.deleteAtPosition(4);
    abc.deleteAtPosition(1);

    abc.print();  

    cout << abc.search(20) << endl; 
    cout << abc.search(1) <<endl; 

    return 0;
}
