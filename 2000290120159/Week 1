1. Reverse linked list-


class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* current=head;
        ListNode* prev=NULL;
        ListNode* nex;
        while(current!=NULL){
            nex=current->next;
            current->next=prev;
            prev=current;
            current=nex;
        }
        
        return prev;
    }
};

2. Middle of the linked list


class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* temp=head;
        int count=0;
        while(temp!=NULL){
            temp=temp->next;
            count++;
        }
        int x=(count/2);
        for(int i=1;i<=x;i++){
            head=head->next;
        }
        return head;
        
    }
};

3. Merge two sorted arrays


class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* res;
        if(list1==NULL){
            return list2;
        }
        if(list2==NULL){
            return list1;
        }
        if(list1->val <= list2->val){
            res=list1;
            res->next=mergeTwoLists(list1->next,list2);
           
        }
        else{
            res=list2;
            res->next=mergeTwoLists(list1,list2->next);
            
        }
        return res;
    }
};

4. Remove nth node from the end of the list


class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* temp=head;
        int count=0;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        if(count==1 && n==1){
            head=NULL;
            return head;
        }
        int x=count-n;
        temp=head;
        for(int i=1;i<x;i++){
            temp=temp->next;
        }
        if(n==1){
            temp->next=NULL;
        }
        if(count==n && n>1){
            head=temp->next;
            return head;
        }
        if(n>1)
        temp->next=temp->next->next;
        return head;
    }
};

5. Delete node in a linked list

class Solution {
public:
    void deleteNode(ListNode* node) {
       ListNode* temp=node->next;
       node->val=node->next->val;
       node->next=node->next->next;
       delete temp;

    }
}; 
